import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useEffect, useState } from "react";
import useConnectedUsers from "./_hooks/useConnectedUsers";
import DevTools from "./_components/devtools/DevTools";
import Providers from "./providers";
export default function SessionsList({ query, socketURL }) {
    const [username, setUsername] = useState("");
    const [currentUser, setCurrentUser] = useState();
    const [clientUsers, setClientUsers] = useState([]);
    const [showQueries, setShowQueries] = useState(true);
    const { users, isConnected, socket } = useConnectedUsers({
        query,
        socketURL,
    });
    useEffect(() => {
        const foundUser = users.find((user) => user.username === username);
        setCurrentUser(foundUser);
    }, [setCurrentUser, users, username]);
    useEffect(() => {
        setClientUsers(users.filter((user) => user.clientType !== "server"));
    }, [users]);
    return (_jsxs(Providers, { children: [_jsx("div", { children: _jsx("div", { className: `p-[1px] w-full ${isConnected ? "bg-green-400" : "bg-red-400"}` }) }), _jsxs("div", { className: " w-full h-full py-2 ", children: [_jsxs("div", { className: "border-[#d0d5dd] border-b-2 py-1 flex flex-wrap  ", children: [_jsxs("div", { className: "mx-2", children: [_jsx("span", { className: "text-[#475467] font-bold ", children: "TANSTACK" }), _jsx("p", { className: "bg-custom-gradient font-semibold text-xs flex ", children: _jsx("span", { className: "gradient-text -mt-1", children: "React Query v5 " }) })] }), _jsxs("div", { className: "ml-1 my-auto flex flex-wrap", children: [_jsxs("div", { className: "flex items-center justify-center", children: [_jsx("button", { onClick: () => {
                                                    setShowQueries(true);
                                                }, className: `${showQueries === true
                                                    ? "bg-[#F2F4F7] text-[#344054] hover:bg-[#F0F8FF]"
                                                    : " bg-[#EAECF0] text-[#909193]"}    p-1  border-[1px] border-[#d0d5dd] rounded-bl-[4px] rounded-tl-[4px] text-xs  px-2`, children: "Queries" }), _jsx("button", { onClick: () => {
                                                    setShowQueries(false);
                                                }, className: `${showQueries === false
                                                    ? "bg-[#F2F4F7] text-[#344054] hover:bg-[#F0F8FF]"
                                                    : "bg-[#EAECF0] text-[#909193]"}    p-1  border-[1px] border-[#d0d5dd] rounded-br-[4px] rounded-tr-[4px] text-xs px-2`, children: "Mutations" })] }), _jsxs("div", { className: " flex flex-wrap", children: [_jsx("div", { className: "flex", children: _jsxs("select", { value: username, disabled: !clientUsers.length, className: "p-1 m-1 border-2 border-[#d0d5dd]   shadow-lg rounded-md mx-3", onChange: (e) => {
                                                        setUsername(e.target.value.trim());
                                                    }, children: [clientUsers.length ? (_jsx("option", { hidden: true, value: "", children: "Select a user" }, "default")) : (_jsx("option", { hidden: true, value: "", children: "No connected users" }, "default")), clientUsers.map((user, index) => (_jsx("option", { value: user.username.toString(), children: user.username }, index + user.username)))] }) }), _jsx("p", { className: `ml-auto  ${currentUser ? "bg-green-400" : "bg-red-400"} p-1 m-2 rounded-md text-sm  mt-auto`, children: currentUser ? "CONNECTED" : "DISCONNECTED" })] })] })] }), showQueries ? (_jsx(DevTools, { allQueries: currentUser === null || currentUser === void 0 ? void 0 : currentUser.allQueries, socket: socket, currentUser: currentUser })) : (_jsx("h1", { className: "m-3", children: "Comming soon..." }))] })] }));
}
//# sourceMappingURL=SessionsList.js.map