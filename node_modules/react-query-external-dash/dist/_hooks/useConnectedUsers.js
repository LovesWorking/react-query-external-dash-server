import io from "socket.io-client";
import { useEffect, useState } from "react";
let socket = null; // Module-level variable to store the socket instance
export default function useConnectedUsers({ query, socketURL }) {
    const [isConnected, setIsConnected] = useState(!!(socket === null || socket === void 0 ? void 0 : socket.connected));
    const [users, setUsers] = useState([]);
    if (!socket) {
        // Initialize the socket only if it hasn't been already initialized
        socket = io(socketURL, {
            autoConnect: false, // Initially prevent automatic connection
            query,
        });
    }
    function connect() {
        socket === null || socket === void 0 ? void 0 : socket.connect();
    }
    function disconnect() {
        socket === null || socket === void 0 ? void 0 : socket.disconnect();
    }
    useEffect(() => {
        function onConnect() {
            setIsConnected(true);
        }
        function onDisconnect() {
            setIsConnected(false);
        }
        !socket.connected && connect();
        // Global user list returned from server whenever a new user is added
        socket.on("users-update", (newUsers) => {
            setUsers(newUsers);
        });
        socket === null || socket === void 0 ? void 0 : socket.on("connect", onConnect);
        socket === null || socket === void 0 ? void 0 : socket.on("disconnect", onDisconnect);
        return () => {
            socket.off("users-update");
            socket.off("connect");
            socket.off("disconnect");
            onDisconnect();
            disconnect();
        };
    }, []);
    return { socket, connect, disconnect, isConnected, users };
}
//# sourceMappingURL=useConnectedUsers.js.map