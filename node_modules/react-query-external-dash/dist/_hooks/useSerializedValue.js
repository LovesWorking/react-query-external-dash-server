var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { useState, useEffect } from "react";
/**
 * Displays a string regardless the type of the data
 * @param {unknown} value Value to be stringified
 * @param {boolean} beautify Formats json to multiline
 */
export function useSerializedValue(value, beautify = false) {
    const [serializedValue, setSerializedValue] = useState("");
    useEffect(() => {
        function serializeValue() {
            return __awaiter(this, void 0, void 0, function* () {
                const { serialize } = yield import("superjson");
                const { json } = serialize(value);
                const stringValue = JSON.stringify(json, null, beautify ? 2 : undefined);
                setSerializedValue(stringValue);
            });
        }
        serializeValue();
    }, [value, beautify]);
    return serializedValue;
}
//# sourceMappingURL=useSerializedValue.js.map