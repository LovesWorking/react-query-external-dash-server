import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useState, useMemo } from "react";
import { useQueryClient } from "@tanstack/react-query";
import { Check, CopiedCopier, Copier, ErrorCopier, List, Trash } from "./svgs";
import { updateNestedDataByPath } from "./updateNestedDataByPath";
import sendClientCommand from "../../_util/sendClientCommand";
import { useSerializedValue } from "../../_hooks/useSerializedValue";
function isIterable(x) {
    return Symbol.iterator in x;
}
/**
 * Chunk elements in the array by size
 *
 * when the array cannot be chunked evenly by size, the last chunk will be
 * filled with the remaining elements
 *
 * @example
 * chunkArray(['a','b', 'c', 'd', 'e'], 2) // returns [['a','b'], ['c', 'd'], ['e']]
 */
function chunkArray(array, size) {
    if (size < 1)
        return [];
    let i = 0;
    const result = [];
    while (i < array.length) {
        result.push(array.slice(i, i + size));
        i = i + size;
    }
    return result;
}
const Expander = ({ expanded }) => {
    return (_jsx("span", { className: `inline-block transform ${expanded ? "rotate-90" : "rotate-0"}`, children: _jsx("svg", { width: "12", height: "12", viewBox: "0 0 16 16", fill: "none", xmlns: "http://www.w3.org/2000/svg", className: "stroke-current text-[#98a2b3]", children: _jsx("path", { d: "M6 12L10 8L6 4", strokeWidth: "2", strokeLinecap: "round", strokeLinejoin: "round" }) }) }));
};
const CopyButton = ({ value }) => {
    const [copyState, setCopyState] = useState("NoCopy");
    const handleCopy = () => {
        navigator.clipboard
            .writeText(JSON.stringify(value))
            .then(() => {
            setCopyState("SuccessCopy");
            setTimeout(() => setCopyState("NoCopy"), 1500);
        })
            .catch((err) => {
            console.error("Failed to copy: ", err);
            setCopyState("ErrorCopy");
            setTimeout(() => setCopyState("NoCopy"), 1500);
        });
    };
    return (_jsxs("button", { className: "bg-transparent text-gray-500 border-none inline-flex p-0 items-center justify-center cursor-pointer w-3 h-3 relative z-10 focus:outline-none focus-visible:ring-2 focus-visible:ring-blue-800 focus-visible:ring-offset-2 hover:text-gray-600", title: "Copy object to clipboard", "aria-label": copyState === "NoCopy"
            ? "Copy object to clipboard"
            : copyState === "SuccessCopy"
                ? "Object copied to clipboard"
                : "Error copying object to clipboard", onClick: copyState === "NoCopy" ? handleCopy : undefined, children: [copyState === "NoCopy" && _jsx(Copier, {}), copyState === "SuccessCopy" && _jsx(CopiedCopier, { theme: "light" }), copyState === "ErrorCopy" && _jsx(ErrorCopier, {})] }));
};
const DeleteItemButton = ({ socket, dataPath, activeQuery, currentUser, }) => {
    if (!activeQuery)
        return null;
    const handleDelete = () => {
        if (!activeQuery)
            return null;
        const oldData = activeQuery.state.data;
        // const newData = deleteNestedDataByPath(oldData, dataPath);
        // queryClient.setQueryData(activeQuery.queryKey, newData);
        const socketID = currentUser && currentUser.id;
        if (!socketID)
            return;
        sendClientCommand({
            socket: socket,
            socketID: socketID,
            command: {
                queryKey: activeQuery.queryKey.toString(),
                command: "Data Delete",
                dataPath: dataPath,
            },
        });
    };
    return (_jsx("button", { className: "bg-transparent text-gray-500 border-none inline-flex p-0 items-center justify-center cursor-pointer w-3 h-3 relative z-10 focus:outline-none focus-visible:ring-2 focus-visible:ring-blue-800 focus-visible:ring-offset-2 hover:text-gray-600", title: "Delete item", "aria-label": "Delete item", onClick: handleDelete, children: _jsx(Trash, {}) }));
};
const ClearArrayButton = ({ socket, dataPath, activeQuery, currentUser, }) => {
    if (!activeQuery)
        return null;
    const handleClear = () => {
        const oldData = activeQuery.state.data;
        const newData = updateNestedDataByPath(oldData, dataPath, []);
        // Send client the new data
        // queryClient.setQueryData(activeQuery.queryKey, newData);
        const socketID = currentUser && currentUser.id;
        if (!socketID)
            return;
        sendClientCommand({
            socket: socket,
            socketID: socketID,
            command: {
                queryKey: activeQuery.queryKey.toString(),
                command: "Data Update",
                newValue: newData,
            },
        });
    };
    return (_jsx("button", { className: "bg-transparent text-gray-500 border-none inline-flex p-0 items-center justify-center cursor-pointer w-3 h-3 relative z-10 focus:outline-none focus-visible:ring-2 focus-visible:ring-blue-800 focus-visible:ring-offset-2 hover:text-gray-600", title: "Remove all items", "aria-label": "Remove all items", onClick: handleClear, children: _jsx(List, {}) }));
};
const ToggleValueButton = ({ currentUser, socket, dataPath, activeQuery, value, }) => {
    //
    const queryClient = useQueryClient();
    if (!activeQuery)
        return null;
    const handleClick = () => {
        const oldData = activeQuery.state.data;
        const newData = updateNestedDataByPath(oldData, dataPath, !value);
        // Send client the new data
        // queryClient.setQueryData(activeQuery.queryKey, newData);
        const socketID = currentUser && currentUser.id;
        if (!socketID)
            return;
        sendClientCommand({
            socket: socket,
            socketID: socketID,
            command: {
                queryKey: activeQuery.queryKey.toString(),
                command: "Data Update",
                newValue: newData,
            },
        });
    };
    return (_jsx("button", { className: `
    bg-transparent text-[#667085] border-none inline-flex items-center justify-center cursor-pointer 
    w-4 h-4 relative z-10 hover:text-gray-600 focus:outline-none focus-visible:ring-2 
    focus-visible:ring-blue-800 focus-visible:ring-offset-2
  `, title: "Toggle value", "aria-label": "Toggle value", onClick: handleClick, children: _jsx(Check, { checked: value, theme: "light" }) }));
};
export default function Explorer({ currentUser, socket, editable, label, value, defaultExpanded, activeQuery, dataPath, itemsDeletable, }) {
    const queryClient = useQueryClient();
    // Explorer's section is expanded or collapsed
    const [isExpanded, setIsExpanded] = useState((defaultExpanded || []).includes(label));
    const toggleExpanded = () => setIsExpanded((old) => !old);
    const [expandedPages, setExpandedPages] = useState([]);
    // Flattens data to label and value properties for easy rendering.
    const subEntries = useMemo(() => {
        if (Array.isArray(value)) {
            // Handle if array
            return value.map((d, i) => ({
                label: i.toString(),
                value: d,
            }));
        }
        else if (value !== null &&
            typeof value === "object" &&
            isIterable(value)) {
            // Handle if object
            if (value instanceof Map) {
                return Array.from(value, ([key, val]) => ({
                    label: key.toString(),
                    value: val,
                }));
            }
            return Array.from(value, (val, i) => ({
                label: i.toString(),
                value: val,
            }));
        }
        else if (typeof value === "object" && value !== null) {
            return Object.entries(value).map(([key, val]) => ({
                label: key,
                value: val,
            }));
        }
        return [];
    }, [value]);
    // Identifies the data type of the value prop (e.g., 'array', 'Iterable', 'object')
    const valueType = useMemo(() => {
        if (Array.isArray(value)) {
            return "array";
        }
        else if (value !== null &&
            typeof value === "object" &&
            isIterable(value) &&
            typeof value[Symbol.iterator] === "function") {
            return "Iterable";
        }
        else if (typeof value === "object" && value !== null) {
            return "object";
        }
        return typeof value;
    }, [value]);
    // Takes a long list of items and divides it into smaller groups or 'chunks'.
    const subEntryPages = useMemo(() => {
        return chunkArray(subEntries, 100);
    }, [subEntries]);
    const currentDataPath = dataPath !== null && dataPath !== void 0 ? dataPath : []; // NOT USED FOR DATA EXPLORER
    const handleChange = (changeEvent) => {
        if (!activeQuery)
            return null;
        const oldData = activeQuery.state.data;
        let newValue;
        if (valueType === "number") {
            newValue = Number(changeEvent.target.value);
        }
        else {
            newValue = changeEvent.target.value;
        }
        const newData = updateNestedDataByPath(oldData, currentDataPath, newValue);
        const socketID = currentUser && currentUser.id;
        if (!socketID)
            return;
        sendClientCommand({
            socket: socket,
            socketID: socketID,
            command: {
                queryKey: activeQuery.queryKey.toString(),
                command: "Data Update",
                newValue: newData,
            },
        });
    };
    const myDisplayValue = useSerializedValue(value);
    if (activeQuery === undefined) {
        return null;
    }
    return (_jsx("div", { className: "min-w-[200px] text-xs flex flex-wrap w-full ", children: _jsxs("div", { className: "relative outline-none break-words w-full mr-1", children: [subEntryPages.length > 0 && (
                // Expanded Show
                _jsxs(_Fragment, { children: [_jsxs("div", { className: "flex items-center gap-2", children: [_jsxs("button", { className: " cursor-pointer text-inherit font-inherit outline-inherit h-5 bg-transparent border-none p-0 inline-flex items-center gap-1 relative", onClick: () => toggleExpanded(), children: [_jsx(Expander, { expanded: isExpanded }), " ", _jsx("span", { children: label }), _jsxs("span", { className: "text-gray-500 text-xs ml-1", children: [String(valueType).toLowerCase() === "iterable"
                                                    ? "(Iterable) "
                                                    : "", subEntries.length, " ", subEntries.length > 1 ? `items` : `item`] })] }), editable && (_jsxs("div", { className: "inline-flex gap-2 items-center", children: [_jsx(CopyButton, { value: value }), itemsDeletable && activeQuery !== undefined && (_jsx(DeleteItemButton, { currentUser: currentUser, socket: socket, activeQuery: activeQuery, dataPath: currentDataPath })), valueType === "array" && activeQuery !== undefined && (_jsx(ClearArrayButton, { currentUser: currentUser, socket: socket, activeQuery: activeQuery, dataPath: currentDataPath }))] }))] }), isExpanded && (_jsxs(_Fragment, { children: [subEntryPages.length === 1 && (_jsx(_Fragment, { children: _jsx("div", { className: "ml-2 pl-3 border-l-2 border-gray-300", children: subEntries.map((entry, index) => (_jsx(Explorer, { currentUser: currentUser, socket: socket, defaultExpanded: defaultExpanded, label: entry.label, value: entry.value, editable: editable, dataPath: [...currentDataPath, entry.label], activeQuery: activeQuery, itemsDeletable: valueType === "array" ||
                                                valueType === "Iterable" ||
                                                valueType === "object" }, entry.label + index))) }) })), subEntryPages.length > 1 && (_jsx("div", { className: "ml-2 pl-3 border-l-2 border-gray-300", children: subEntryPages.map((entries, index) => (_jsx("div", { children: _jsxs("div", { className: "relative outline-none break-words", children: [_jsxs("button", { onClick: () => setExpandedPages((old) => old.includes(index)
                                                        ? old.filter((d) => d !== index)
                                                        : [...old, index]), className: "cursor-pointer bg-transparent border-none p-0 inline-flex items-center gap-1 relative", children: [_jsx(Expander, { expanded: expandedPages.includes(index) }), "[", index * 100, "...", index * 100 + 99, "]"] }), expandedPages.includes(index) && (_jsx("div", { className: "ml-2 pl-3 border-l-2 border-gray-300", children: entries.map((entry) => (_jsx(Explorer, { currentUser: currentUser, socket: socket, defaultExpanded: defaultExpanded, label: entry.label, value: entry.value, editable: editable, dataPath: [...currentDataPath, entry.label], activeQuery: activeQuery }, entry.label))) }))] }) }, index))) }))] }))] })), subEntryPages.length === 0 && (_jsxs("div", { className: "inline-flex gap-2 w-full my-1 leading-11 items-center", children: [_jsxs("span", { className: "text-[#344054] flex-grow-1 whitespace-nowrap", children: [label, ":"] }), " ", editable &&
                            activeQuery !== undefined &&
                            (valueType === "string" ||
                                valueType === "number" ||
                                valueType === "boolean") ? (_jsxs(_Fragment, { children: [editable &&
                                    activeQuery &&
                                    (valueType === "string" || valueType === "number") && (_jsx("input", { type: valueType === "number" ? "number" : "text", className: "border-none h-[22px]   m-[1px] py-[2px] pl-[6px] pr-[4px] flex-grow rounded-sm bg-[#eaecf0] dark:bg-gray-700 hover:bg-[#D0D5DD] dark:hover:bg-gray-800 text-[#6938EF] dark:text-[#6938EF]", value: value.toString(), onChange: handleChange })), valueType === "boolean" && (_jsxs("span", { className: "border-none p-1 flex-grow rounded-xs bg-gray-200 dark:bg-gray-700 hover:bg-[#D0D5DD] dark:hover:bg-gray-800 text-[#6938EF] dark:text-[#6938EF] inline-flex gap-2 items-center", children: [_jsx(ToggleValueButton, { currentUser: currentUser, socket: socket, activeQuery: activeQuery, dataPath: currentDataPath, value: value }), myDisplayValue] }))] })) : (_jsx("span", { className: "flex-grow text-[#6938EF] dark:text-[#6938EF]  ", children: myDisplayValue })), editable && itemsDeletable && activeQuery !== undefined && (_jsx(DeleteItemButton, { currentUser: currentUser, socket: socket, activeQuery: activeQuery, dataPath: currentDataPath }))] }))] }) }));
}
//# sourceMappingURL=Explorer.js.map