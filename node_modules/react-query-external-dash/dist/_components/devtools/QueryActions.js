import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import ActionButton from "./ActionButton";
import { getQueryStatusLabel } from "../../_util/getQueryStatusLabel";
import sendClientCommand from "../../_util/sendClientCommand";
export default function QueryActions({ query, socket, currentUser }) {
    if (query === undefined) {
        return null;
    }
    const queryStatus = query.state.status;
    function sendCommand(coomand) {
        if (!query) {
            console.error("Query not found");
            return;
        }
        // Send client trigger loading command
        const socketID = currentUser && currentUser.id;
        if (!socketID)
            return;
        sendClientCommand({
            socket: socket,
            socketID: socketID,
            command: {
                queryKey: query.queryKey.toString(),
                command: coomand,
            },
        });
    }
    // Define the actions
    const handleRefetch = () => {
        sendCommand("Refetch");
    };
    const handleInvalidate = () => {
        sendCommand("Invalidate");
    };
    const handleReset = () => {
        sendCommand("Reset");
    };
    const handleRemove = () => {
        sendCommand("Remove");
    };
    const handleTriggerLoading = () => {
        sendCommand("Trigger Loading");
    };
    const handleTriggerError = () => {
        sendCommand("Trigger Error");
    };
    return (_jsxs("div", { className: "min-w-[200px] text-xs flex flex-wrap", children: [_jsx("h3", { className: "text-left bg-[#EAECF0] p-1 w-full", children: "Actions" }), _jsx(ActionButton, { disabled: getQueryStatusLabel(query) === "fetching", onClick: handleRefetch, bgColorClass: "bg-btnRefetch", text: "Refetch", textColorClass: "text-btnRefetch" }), _jsx(ActionButton, { disabled: queryStatus === "pending", onClick: handleInvalidate, bgColorClass: "bg-btnInvalidate", text: "Invalidate", textColorClass: "text-btnInvalidate" }), _jsx(ActionButton, { disabled: queryStatus === "pending", onClick: handleReset, bgColorClass: "bg-btnReset", text: "Reset", textColorClass: "text-btnReset" }), _jsx(ActionButton, { disabled: getQueryStatusLabel(query) === "fetching", onClick: handleRemove, bgColorClass: "bg-btnRemove", text: "Remove", textColorClass: "text-btnRemove" }), _jsx(ActionButton, { disabled: false, onClick: handleTriggerLoading, bgColorClass: "bg-btnTriggerLoading", text: query.state.data === undefined ? "Restore Loading" : "Trigger Loading", textColorClass: "text-btnTriggerLoading" }), _jsx(ActionButton, { disabled: queryStatus === "pending", onClick: handleTriggerError, bgColorClass: "bg-btnTriggerLoadiError", text: queryStatus === "error" ? "Restore" : "Trigger Error", textColorClass: "text-btnTriggerLoadiError" })] }));
}
//# sourceMappingURL=QueryActions.js.map